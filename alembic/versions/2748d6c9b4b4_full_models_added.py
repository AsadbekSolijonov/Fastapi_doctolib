"""full_models_added

Revision ID: 2748d6c9b4b4
Revises: c77f25c1a68d
Create Date: 2025-10-02 13:26:47.763892

"""
from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '2748d6c9b4b4'
down_revision: Union[str, Sequence[str], None] = 'c77f25c1a68d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('branch',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('section',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('branch_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['branch_id'], ['branch.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('doctor_schedule',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('doctor_id', sa.Integer(), nullable=False),
                    sa.Column('weekday', sa.Enum('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', name='weekday'),
                              nullable=False),
                    sa.Column('start_time', sa.Time(), nullable=False),
                    sa.Column('end_time', sa.Time(), nullable=False),
                    sa.CheckConstraint('start_time < end_time', name='ck_schedule_time'),
                    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('doctor_id', 'weekday', 'start_time', 'end_time', name='uq_doctor_slot')
                    )
    op.create_table('room',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('floor', sa.Integer(), nullable=False),
                    sa.Column('door_number', sa.Integer(), nullable=False),
                    sa.Column('section_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('section_id', 'door_number', name='uq_section_door')
                    )
    op.create_table('appointment',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('doctor_id', sa.Integer(), nullable=True),
                    sa.Column('patient_id', sa.Integer(), nullable=False),
                    sa.Column('room_id', sa.Integer(), nullable=True),
                    sa.Column('start_at', sa.DateTime(), nullable=False),
                    sa.Column('end_at', sa.DateTime(), nullable=False),
                    sa.Column('status', sa.Enum('pending', 'active', 'finished', 'cancelled', name='appointmentstatus'),
                              nullable=False),
                    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['patient_id'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['room_id'], ['room.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('room_closure',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('room_id', sa.Integer(), nullable=False),
                    sa.Column('closed_from', sa.DateTime(), nullable=False),
                    sa.Column('closed_to', sa.DateTime(), nullable=False),
                    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.CheckConstraint('closed_from < closed_to', name='ck_closure_time'),
                    sa.ForeignKeyConstraint(['room_id'], ['room.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('appointment_status_history',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('appointment_id', sa.Integer(), nullable=False),
                    sa.Column('old_status',
                              sa.Enum('pending', 'active', 'finished', 'cancelled', name='appointmentstatus'),
                              nullable=False),
                    sa.Column('new_status',
                              sa.Enum('pending', 'active', 'finished', 'cancelled', name='appointmentstatus'),
                              nullable=False),
                    sa.Column('changed_at', sa.DateTime(), nullable=False),
                    sa.Column('changed_by', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['appointment_id'], ['appointment.id'], ),
                    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('payment',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('appointment_id', sa.Integer(), nullable=False),
                    sa.Column('amount', sa.Numeric(precision=18, scale=2), nullable=False),
                    sa.Column('currency', sa.String(length=3), nullable=False),
                    sa.Column('method', sa.Enum('cash', 'card', 'transfer', name='paymentmethod'), nullable=False),
                    sa.Column('status', sa.Enum('pending', 'paid', 'failed', 'refunded', name='paymentstatus'),
                              nullable=False),
                    sa.Column('paid_at', sa.DateTime(), nullable=True),
                    sa.Column('reference', sa.String(length=64), nullable=True),
                    sa.CheckConstraint('amount > 0', name='ck_amount_positive'),
                    sa.ForeignKeyConstraint(['appointment_id'], ['appointment.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('reference')
                    )
    with op.batch_alter_table('payment', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payment_appointment_id'), ['appointment_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('created_at',
                              existing_type=sa.DATETIME(),
                              server_default=None,
                              existing_nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('created_at',
                              existing_type=sa.DATETIME(),
                              server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              existing_nullable=False)

    with op.batch_alter_table('payment', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payment_appointment_id'))

    op.drop_table('payment')
    op.drop_table('appointment_status_history')
    op.drop_table('room_closure')
    op.drop_table('appointment')
    op.drop_table('room')
    op.drop_table('doctor_schedule')
    op.drop_table('section')
    op.drop_table('branch')
    # ### end Alembic commands ###
